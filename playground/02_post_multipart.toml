[request]
# Environment variables can be used everywhere in this file, they are replaced before processing.
# They should be defined like this: {{variable_name}} and are replaced before processing the request

# URL to call. Optional parameter.
url = '{{base_url}}post' # This will result in 'http://httpbin.org/post'

# Method, should be one of [OPTIONS,HEAD,POST,PUT,PATCH,DELETE]. Mandatory parameter
method = 'POST'

# Request timeout, ms. Optional parameter
timeout = {{base_timeout}}

# Maximum number of redirects. Default is 30. Zero means no redirects are allowed
max_redirects = 0

# The request is considered to be OK if either the response code or the exception are specified in the array
# This is an optional field. If not specified then all requests without exception will be considered as OK
expected_status = [200, "TooManyRedirects"]

# Sessions are disabled unless asked explicitly
# Any request in the chain that doesn't have "session" or "session" is set to false breaks the session
# Sessions are valid only for requests that are in the same folder
session = false

[headers]
# According to HTTP specification header names are case-insensitive
# Internally we convert them to Pascal-Case, for example:
# "cOnTeNt-tYpE" --> "Content-Type"
# The value remains case-sensitive

[body]
# Body type, either "text" or "multipart"
type = "multipart"
[multipart-1]
# This example adds a normal key/value part
name = "json_data"
data = '''{
    "id": 10325,
    "value": 56532,
    "status": "Invalid data"
}'''
[multipart-2]
# This example adds the file from the file system
name = "file_data"
filename = "main.py"
[multipart-3]
# This creates a "virtual" file. The file doesn't exist on the file system, but will be sent as such
name = "virtual_file"
filename = "virtual.txt"
data = '''Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris
nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor
in reprehenderit in voluptate velit
esse cillum dolore eu fugiat nulla
pariatur. Excepteur sint occaecat
cupidatat non proident, sunt in culpa
qui officia deserunt mollit anim
id est laborum.'''

[scripts]
# This section has two scripts: pre-request and post-request
# pre-request script has access to:
#     - req (HttpRequest object)
#     - EnvVars (Dictionary with var_name:var_value pairs)
#     - AppLogger - log custom messages and test results
#     - @test_case decorator for the test case functions (see examples below)
# post-request script has access to the same set of objects, as well as to:
#     - res (HttpResponse object) 
pre-request = '''
# Here you can write any python code your interpreter can execute before sending the request

# For example, we test some pre-requisites ....
@test_case("Sessions should be disabled")
def validate_sessions():
    expect(req.Session).to.be.false

'''
# In the post-request script you can see how test cases are implemented in a more elegant way.
# For the response validation you can use grappa. It is already available there, no need to import
post-request = '''
@test_case("Validate the response")
def validate_the_response():
    # You can change 'None' to any other exception type if needed, e.g. 'ConnectTimeout' or 'TooManyRedirects'
    expect(res.Exception).to.equal(None)
    expect(res.Status).to.be.equal(200)
    expect(res.Time).to.be.less(1000)

@test_case("This test raises the exception")
def exceptional_test():
    # You can raise any exception if you want
    raise FileNotFoundError("Oops, the file is lost")
'''
